{"noir_version":"0.29.0+5b9b1fab51e35c2112c0136785b5b69cd8529a92","name":"BoxReact","functions":[{"name":"getNumber","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"owner":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"struct","path":"value_note::value_note::ValueNote","fields":[{"name":"value","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"is_transient","type":{"kind":"boolean"}}]}}]},"visibility":"public"},"return_witnesses":[1,2,3,4,5,6,7],"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":7}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[7,8,9,10],"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"setNumber","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"number","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":38}],"number":[{"start":38,"end":39}],"owner":[{"start":39,"end":40}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"master_nullifier_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"app_nullifier_secret_key","type":{"kind":"field"}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"return_witnesses":[4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679,4680],"error_types":{}},"bytecode":"","debug_symbols":""},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"number","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":38}],"number":[{"start":38,"end":39}],"owner":[{"start":39,"end":40}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"master_nullifier_public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"app_nullifier_secret_key","type":{"kind":"field"}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"return_witnesses":[4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521],"error_types":{}},"bytecode":"","debug_symbols":"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nw/+218jyOUj5MtH0MtHKJePUC8foV0+Qr98hHH1CGtN2VdHuHxN98vXdL98TffL13S/fE33y9d0v3xN98vXdL98TY/L1/S4fE2Py9f0uHxNj8vX9Lh8TY/L1/S4fE2Py9f0uHxNp227foh0/RBy/RD5+iH0+iHK9UPU64do1w/Rrx/i+tWdrl/d6frVna5f3en61Z2uX93p+tWdrl/d6frVna5f3en61S3Xr265fnXL9atbrl/dcv3qlutXt1y/uuX61S3Xr265fnXn61d3vn515+tXd75+defrV3e+fnXn61d3vn515+tXd75+dev1q1uvX916/erW61e3Xr+69frVrdevbr1+dev1q1uvX93l+tVdrl/d5frVXa5f3eX61V2uX93l+tVdrl/d5frVXa5f3fX61V2vX931+tVdr1/d9frVXa9f3fX61V2vX931+tVdr1/d7frVff19tHT9hbR0/Y20dP2VtHT9nbR0/aW0dP2ttHT9tbR0/b20dP3FtHT9zbR0/dW0dP3dtHT95bR0/e20dP31tHT9/bR0/QW1dP0NtXT9FbV0/R21dP0ltXT9LbV0/TW1dP09tXT9RbV0/U21dP1VtXT9XTW5/q6aXH9XTa6/qybX31WTTa8folw/RL1+iHb9EP36Ia5f3dffVZPr76rJ9XfV5Pq7anL9XTW5/q6aXH9XTa6/qybX31WT6++qyfV31eT6u2py/V01uf6umlx/V02uv6sm199Vk+vvqsn1d9Xk+rtqcv1dNbn+rppcf1dNrr+rJtffVZPr76rJ9XfV5Pq7anL9XTW5/q6aXH9XTa6/qybX31WT6++qyfV31eTfb3mV7dBxlPSHz1B/D9EvH+Lf70cVOYfIZTmEXD9Evn4IvX6Icv0QH54XR6y5Yv/+1ffb5/ffv/p+P0S5foh6/RDXb1f//tV30UMTWYoshxiXD/HvX32/HyJdP4RcP8S/r+7czyHycgi9fohy/RD1+iHa9UP064cYlx+A//7V9/shrv+Talz/J9W4/k+qf//q+/0Q1/9J9e9ffb8fol0/RL9+iMtXd96264dI1w8h1w+Rrx9Crx+iXD9EvX6Idv0Q/fohrl/d6frVna5f3en61Z2uX93p+tWdrl/d6frVna5f3en61Z2uX91y/eqW61e3XL+65frVLdevbrl+dcv1q1suXt3tP8sB9i/l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nURQ4lMjwhKfTiIo8ekkghKfTiIo8ekkUjgiKPHpJIISn04iKPHpJIISn04iKPGpEWGJTycRlPh0EkGJTycRlPh0EikcEZT4dBJBiU8nEZT4dBJBiU8nEZT49NFvghKfPpCgxKcPJCjx6QMJSnz6QMISDE4kKPHpAwnuozYw8emjuAglPn0gQYlPH0iKhwQlPn0gge1LPaC63Lmry527uty5q8udu7rcuavLnbu63Lmry527uty5q8udu7rcuavLnbu63Lmry527uty5q8udu7rcuavLnbu63Lmryx2uutzhqsudu7rcuavLnbu63Lmry527uty5q8udu7rcuavLnbu63Lmry527uty5q8udu7rcuavLnbu63Lmry527uty5q8udu7rc4arLHa663OGqyx2uutzhqssdrrrc4arLHa663OGqyx2uutzhqssdrrrc4arLHa663OGqyx2uutzhqssdrrrc4arLHa663OGqyx2uutzhqssdrrrc4arLHa663OGqyx2uutzhqssdrrrc4arLHa663OGqyx2uutzhqssdrrrc4arLHa663OGqyx2uutzhqssdr7rc8arLHa+63PGqyx2vutzxqssdr7rc8arLHa+63PGqyx2vutzxqssdrrosbV1dziP9SunWX4/Q2/HZ0PgTRj7/ln2H6UgwAwlm3f7+MZoERSNQNBmKRqFoChRNhaKB2okT1FacoPZigdqLBWovFqi9WKD2YoHaiwVqL5bP9uIj1Vyp5d6m+UDU3Fap4Umta49vU8mVEldquUb0bE9qrauUulLFlaqu1PLZ0LEdqZFWqe5KDU9q3eR5m0qu1HLmy3a8HZa0TFVXajkbVY7touaySK1vWL9NuQjX9zlLPuaw6LZKdVdqeFLru4tvU8mVElcqu1LqShVXqrpSb5+NsUp1V2r9bMj59JZVqq2fjXOlPEklV0pcqfWzcf4RUIasUupKFVequlLNlVo/G62fqbxKDU9qfVvtbSq5UuJKZVdKXaniSlVXqr1O1W31bPTuSj15No7vM2tapda3Ysr5cfKTVHKlxJXKnr8B1rc03qaKK1VdqeZKdVfK9dfXk2/fX8Zyu158mhu1+DQ3avFpbtTi09yoxae5UYtPc6MWn+ZGLT7NjVp8mhu1+DQ3avFpbtTi09yoxae5UYtPc6MWn+ZGLT7NjVp8mhu1+DQ3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"}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"BoxReact::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BoxReact::constructor_parameters","fields":[{"name":"number","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"BoxReact::setNumber_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"BoxReact::setNumber_parameters","fields":[{"name":"number","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"869710811710178111116101"},{"kind":"string","value":"ValueNote"}]}],"storage":[{"kind":"struct","fields":[{"name":"numbers","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"1"}},{"name":"typ","value":{"kind":"string","value":"Map<AztecAddress, PrivateMutable<ValueNote>>"}}]}}]}]}},"file_map":{"3":{"source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, N> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<N> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, N> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"4":{"source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<Len>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, MaxLen> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, MaxLen, Len> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n    // TODO: Allow imports from \"super\"\n    use crate::collections::bounded_vec::BoundedVec;\n\n    #[test]\n    fn empty_equality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n        assert_eq(bounded_vec1, bounded_vec2);\n    }\n\n    #[test]\n    fn inequality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n        bounded_vec1.push(1);\n        bounded_vec2.push(2);\n\n        assert(bounded_vec1 != bounded_vec2);\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"21":{"source":"// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_unsafe_16(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Assert that the decomposition of P is greater than the decomposition of x\n    assert_gt_limbs((PLO, PHI), (xlo, xhi));\n    (xlo, xhi)\n}\n\nfn lt_unsafe_internal(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn lte_unsafe_internal(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        lt_unsafe_internal(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_unsafe_32(x: Field, y: Field) -> bool {\n    lt_unsafe_internal(x, y, 32)\n}\n\nunconstrained fn lte_unsafe_16(x: Field, y: Field) -> bool {\n    lte_unsafe_internal(x, y, 16)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let a_limbs = decompose(a);\n    let b_limbs = decompose(b);\n\n    // Assert that a_limbs is greater than b_limbs\n    assert_gt_limbs(a_limbs, b_limbs)\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe_32(a, b) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose_unsafe, decompose, lt_unsafe_internal, assert_gt, gt, lt, TWO_POW_128,\n        lte_unsafe_internal, PLO, PHI\n    };\n\n    #[test]\n    fn check_decompose_unsafe() {\n        assert_eq(decompose_unsafe(TWO_POW_128), (0, 1));\n        assert_eq(decompose_unsafe(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose_unsafe(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_lt_unsafe() {\n        assert(lt_unsafe_internal(0, 1, 16));\n        assert(lt_unsafe_internal(0, 0x100, 16));\n        assert(lt_unsafe_internal(0x100, TWO_POW_128 - 1, 16));\n        assert(!lt_unsafe_internal(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_lte_unsafe() {\n        assert(lte_unsafe_internal(0, 1, 16));\n        assert(lte_unsafe_internal(0, 0x100, 16));\n        assert(lte_unsafe_internal(0x100, TWO_POW_128 - 1, 16));\n        assert(!lte_unsafe_internal(0, TWO_POW_128, 16));\n\n        assert(lte_unsafe_internal(0, 0, 16));\n        assert(lte_unsafe_internal(0x100, 0x100, 16));\n        assert(lte_unsafe_internal(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(lte_unsafe_internal(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"22":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"28":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n\n    pub fn hash<N>(input: [Field; N], message_size: u64) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<N>(input: [Field; N], in_len: u64, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"31":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\n\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<N>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else if ascii < 71 {\n            ascii - 55\n        } else {\n            ascii - 87\n        } as Field\n    }\n\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if self < b {\n            (U128::from_u64s_le(0, 0), self)\n        } else {\n            //TODO check if this can overflow?\n            let (q,r) = self.unconstrained_div(b * U128::from_u64s_le(2, 0));\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::from_u64s_le(1, 0), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod test {\n    use crate::uint128::{U128, pow64};\n\n    #[test]\n    fn test_not() {\n        let num = U128::from_u64s_le(0, 0);\n        let not_num = num.not();\n\n        let max_u64: Field = pow64 - 1;\n        assert_eq(not_num.hi, max_u64);\n        assert_eq(not_num.lo, max_u64);\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n}\n","path":"std/uint128.nr"},"46":{"source":"contract BoxReact {\n    use dep::aztec::prelude::{AztecAddress, PrivateMutable, Map, NoteInterface, NoteHeader};\n\n    use dep::value_note::value_note::{ValueNote, VALUE_NOTE_LEN};\n\n    #[aztec(storage)]\n    struct Storage {\n        numbers: Map<AztecAddress, PrivateMutable<ValueNote>>,\n    }\n\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(number: Field, owner: AztecAddress) {\n        let numbers = storage.numbers;\n        let mut new_number = ValueNote::new(number, owner);\n        numbers.at(owner).initialize(&mut new_number, true);\n    }\n\n    #[aztec(private)]\n    fn setNumber(number: Field, owner: AztecAddress) {\n        let numbers = storage.numbers;\n        let mut new_number = ValueNote::new(number, owner);\n        numbers.at(owner).replace(&mut new_number, true);\n    }\n\n    unconstrained fn getNumber(owner: AztecAddress) -> pub ValueNote {\n        let numbers = storage.numbers;\n        numbers.at(owner).view_note()\n    }\n}\n","path":"/root/workspace/src/contracts/src/main.nr"},"52":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"59":{"source":"use dep::protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateMutable<T> {}\n\nimpl<Note> PrivateMutable<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note: Note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1))[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr"},"61":{"source":"use dep::protocol_types::{hash::pedersen_hash, traits::FromField, address::AztecAddress};\n\nuse crate::context::{PrivateContext, Context};\nuse crate::history::public_storage::public_storage_historical_read;\nuse crate::public_storage;\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{scheduled_delay_change::ScheduledDelayChange, scheduled_value_change::ScheduledValueChange}\n};\n\nstruct SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    context: PrivateContext,\n    // The contract address of the contract we want to read from\n    other_contract_address: AztecAddress,\n    // The storage slot where the SharedMutable is stored on the other contract\n    storage_slot: Field,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numberic value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\n// We have this as a view-only interface to reading Shared Mutables in other contracts.\n// Currently the Shared Mutable does not support this. We can adapt SharedMutable at a later date\nimpl<T, INITIAL_DELAY> SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    pub fn new(\n        context: PrivateContext,\n        other_contract_address: AztecAddress,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        assert(other_contract_address.to_field() != 0, \"Other contract address cannot be 0\");\n        Self { context, other_contract_address, storage_slot, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    pub fn get_current_value_in_private(self) -> T where T: FromField {\n        let mut context = self.context;\n\n        let (value_change, delay_change, historical_block_number) = self.historical_read_from_public_storage(context);\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n\n    fn historical_read_from_public_storage(\n        self,\n        context: PrivateContext\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) where T: FromField {\n        let value_change_slot = self.get_value_change_storage_slot();\n        let mut raw_value_change_fields = [0; 3];\n        for i in 0..3 {\n            raw_value_change_fields[i] = public_storage_historical_read(\n                    context,\n                    value_change_slot + i as Field,\n                    self.other_contract_address\n                );\n        }\n\n        let delay_change_slot = self.get_delay_change_storage_slot();\n        let raw_delay_change_fields = [public_storage_historical_read(context, delay_change_slot, context.this_address())];\n\n        let value_change = ScheduledValueChange::deserialize(raw_value_change_fields);\n        let delay_change = ScheduledDelayChange::deserialize(raw_delay_change_fields);\n\n        let historical_block_number = context.historical_header.global_variables.block_number as u32;\n\n        (value_change, delay_change, historical_block_number)\n    }\n\n    fn get_value_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 0], 0)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 1], 0)\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable_private_getter.nr"},"63":{"source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse dep::std::cmp::min;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\nstruct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T> {\n    fn serialize(self) -> [Field; 3] where T: ToField {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T> {\n  fn deserialize(input: [Field; 3]) -> Self  where T: FromField {\n    Self {\n        pre: FromField::from_field(input[0]),\n        post: FromField::from_field(input[1]),\n        block_of_change: FromField::from_field(input[2]),\n    }\n  }\n}\n\nmod test {\n    use crate::state_vars::shared_mutable::scheduled_value_change::ScheduledValueChange;\n\n    global TEST_DELAY: u32 = 200;\n\n    #[test]\n    fn test_serde() {\n        let pre = 1;\n        let post = 2;\n        let block_of_change = 50;\n\n        let original = ScheduledValueChange::new(pre, post, block_of_change);\n        let converted = ScheduledValueChange::deserialize((original).serialize());\n\n        assert_eq(original.pre, converted.pre);\n        assert_eq(original.post, converted.post);\n        assert_eq(original.block_of_change, converted.block_of_change);\n    }\n\n    #[test]\n    fn test_get_current_at() {\n        let pre = 1;\n        let post = 2;\n        let block_of_change = 50;\n\n        let value_change: ScheduledValueChange<Field> = ScheduledValueChange::new(pre, post, block_of_change);\n\n        assert_eq(value_change.get_current_at(0), pre);\n        assert_eq(value_change.get_current_at(block_of_change - 1), pre);\n        assert_eq(value_change.get_current_at(block_of_change), post);\n        assert_eq(value_change.get_current_at(block_of_change + 1), post);\n    }\n\n    #[test]\n    fn test_get_scheduled() {\n        let pre = 1;\n        let post = 2;\n        let block_of_change = 50;\n\n        let value_change: ScheduledValueChange<Field> = ScheduledValueChange::new(pre, post, block_of_change);\n\n        assert_eq(value_change.get_scheduled(), (post, block_of_change));\n    }\n\n    fn assert_block_horizon_invariants(\n        value_change: &mut ScheduledValueChange<Field>,\n        historical_block_number: u32,\n        block_horizon: u32\n    ) {\n        // The current value should not change at the block horizon (but it might later).\n        let current_at_historical = value_change.get_current_at(historical_block_number);\n        assert_eq(current_at_historical, value_change.get_current_at(block_horizon));\n\n        // The earliest a new change could be scheduled in would be the immediate next block to the historical one. This\n        // should result in the new block of change landing *after* the block horizon, and the current value still not\n        // changing at the previously determined block_horizon.\n\n        let new = value_change.pre + value_change.post; // Make sure it's different to both pre and post\n        value_change.schedule_change(\n            new,\n            historical_block_number + 1,\n            TEST_DELAY,\n            historical_block_number + 1 + TEST_DELAY\n        );\n\n        assert(value_change.block_of_change > block_horizon);\n        assert_eq(current_at_historical, value_change.get_current_at(block_horizon));\n    }\n\n    #[test]\n    fn test_get_block_horizon_change_in_past() {\n        let historical_block_number = 100;\n        let block_of_change = 50;\n\n        let mut value_change: ScheduledValueChange<Field> = ScheduledValueChange::new(1, 2, block_of_change);\n\n        let block_horizon = value_change.get_block_horizon(historical_block_number, TEST_DELAY);\n        assert_eq(block_horizon, historical_block_number + TEST_DELAY);\n\n        assert_block_horizon_invariants(&mut value_change, historical_block_number, block_horizon);\n    }\n\n    #[test]\n    fn test_get_block_horizon_change_in_immediate_past() {\n        let historical_block_number = 100;\n        let block_of_change = 100;\n\n        let mut value_change: ScheduledValueChange<Field> = ScheduledValueChange::new(1, 2, block_of_change);\n\n        let block_horizon = value_change.get_block_horizon(historical_block_number, TEST_DELAY);\n        assert_eq(block_horizon, historical_block_number + TEST_DELAY);\n\n        assert_block_horizon_invariants(&mut value_change, historical_block_number, block_horizon);\n    }\n\n    #[test]\n    fn test_get_block_horizon_change_in_near_future() {\n        let historical_block_number = 100;\n        let block_of_change = 120;\n\n        let mut value_change: ScheduledValueChange<Field> = ScheduledValueChange::new(1, 2, block_of_change);\n\n        // Note that this is the only scenario in which the block of change informs the block horizon.\n        // This may result in privacy leaks when interacting with applications that have a scheduled change\n        // in the near future.\n        let block_horizon = value_change.get_block_horizon(historical_block_number, TEST_DELAY);\n        assert_eq(block_horizon, block_of_change - 1);\n\n        assert_block_horizon_invariants(&mut value_change, historical_block_number, block_horizon);\n    }\n\n    #[test]\n    fn test_get_block_horizon_change_in_far_future() {\n        let historical_block_number = 100;\n        let block_of_change = 500;\n\n        let mut value_change: ScheduledValueChange<Field> = ScheduledValueChange::new(1, 2, block_of_change);\n\n        let block_horizon = value_change.get_block_horizon(historical_block_number, TEST_DELAY);\n        assert_eq(block_horizon, historical_block_number + TEST_DELAY);\n\n        assert_block_horizon_invariants(&mut value_change, historical_block_number, block_horizon);\n    }\n\n    #[test]\n    fn test_get_block_horizon_n0_delay() {\n        let historical_block_number = 100;\n        let block_of_change = 50;\n\n        let mut value_change: ScheduledValueChange<Field> = ScheduledValueChange::new(1, 2, block_of_change);\n\n        let block_horizon = value_change.get_block_horizon(historical_block_number, 0);\n        // Since the block horizon equals the historical block number, it is not possible to read the current value in\n        // private since the transaction `max_block_number` property would equal an already mined block.\n        assert_eq(block_horizon, historical_block_number);\n    }\n\n    #[test]\n    fn test_schedule_change_before_change() {\n        let pre = 1;\n        let post = 2;\n        let block_of_change = 500;\n\n        let mut value_change: ScheduledValueChange<Field> = ScheduledValueChange::new(pre, post, block_of_change);\n\n        let new = 42;\n        let current_block_number = block_of_change - 50;\n        value_change.schedule_change(\n            new,\n            current_block_number,\n            TEST_DELAY,\n            current_block_number + TEST_DELAY\n        );\n\n        // Because we re-schedule before the last scheduled change takes effect, the old `post` value is lost.\n        assert_eq(value_change.pre, pre);\n        assert_eq(value_change.post, new);\n        assert_eq(value_change.block_of_change, current_block_number + TEST_DELAY);\n    }\n\n    #[test]\n    fn test_schedule_change_after_change() {\n        let pre = 1;\n        let post = 2;\n        let block_of_change = 500;\n\n        let mut value_change: ScheduledValueChange<Field>  = ScheduledValueChange::new(pre, post, block_of_change);\n\n        let new = 42;\n        let current_block_number = block_of_change + 50;\n        value_change.schedule_change(\n            new,\n            current_block_number,\n            TEST_DELAY,\n            current_block_number + TEST_DELAY\n        );\n\n        assert_eq(value_change.pre, post);\n        assert_eq(value_change.post, new);\n        assert_eq(value_change.block_of_change, current_block_number + TEST_DELAY);\n    }\n\n    #[test]\n    fn test_schedule_change_no_delay() {\n        let pre = 1;\n        let post = 2;\n        let block_of_change = 500;\n\n        let mut value_change: ScheduledValueChange<Field>  = ScheduledValueChange::new(pre, post, block_of_change);\n\n        let new = 42;\n        let current_block_number = block_of_change + 50;\n        value_change.schedule_change(new, current_block_number, 0, current_block_number);\n\n        assert_eq(value_change.pre, post);\n        assert_eq(value_change.post, new);\n        assert_eq(value_change.block_of_change, current_block_number);\n        assert_eq(value_change.get_current_at(current_block_number), new);\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr"},"64":{"source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse dep::std::cmp::min;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation \n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the \n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a \n// reduced delay, invalidating prior private reads.\nstruct ScheduledDelayChange<INITIAL_DELAY> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option, \n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numeric value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\nimpl<INITIAL_DELAY> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This \n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is \n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in \n            //                             which to scheduled value change\n\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY)\n            )\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33) \n            + (self.post.is_some() as u64 * (1 << 32)) \n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<INITIAL_DELAY> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some { Option::some(pre_inner) } else { Option::none() },\n            post: if post_is_some { Option::some(post_inner) } else { Option::none() },\n            block_of_change,\n            _dummy: [0; INITIAL_DELAY],\n        }\n    }\n}\n\nmod test {\n    use crate::state_vars::shared_mutable::scheduled_delay_change::ScheduledDelayChange;\n\n    global TEST_INITIAL_DELAY = 13;\n\n    fn assert_equal_after_conversion(original: ScheduledDelayChange<TEST_INITIAL_DELAY>) {\n        // We have to do explicit type annotations because Noir lacks turbofish support.\n        // TODO: improve syntax once https://github.com/noir-lang/noir/issues/4710 is implemented.\n        let converted: ScheduledDelayChange<TEST_INITIAL_DELAY> = ScheduledDelayChange::deserialize((original).serialize());\n\n        assert_eq(original.pre, converted.pre);\n        assert_eq(original.post, converted.post);\n        assert_eq(original.block_of_change, converted.block_of_change);\n    }\n\n    #[test]\n    fn test_serde() {\n        let pre = 1;\n        let post = 2;\n        let block_of_change = 50;\n\n        assert_equal_after_conversion(ScheduledDelayChange::new(Option::some(pre), Option::some(post), block_of_change));\n        assert_equal_after_conversion(ScheduledDelayChange::new(Option::some(pre), Option::none(), block_of_change));\n        assert_equal_after_conversion(ScheduledDelayChange::new(Option::none(), Option::some(post), block_of_change));\n        assert_equal_after_conversion(ScheduledDelayChange::new(Option::none(), Option::none(), block_of_change));\n    }\n\n    #[test]\n    fn test_serde_large_values() {\n        let max_u32 = (1 << 32) - 1;\n\n        let pre = max_u32 as u32;\n        let post = (max_u32 - 1) as u32;\n        let block_of_change = (max_u32 - 2) as u32;\n\n        assert_equal_after_conversion(ScheduledDelayChange::new(Option::some(pre), Option::some(post), block_of_change));\n        assert_equal_after_conversion(ScheduledDelayChange::new(Option::some(pre), Option::none(), block_of_change));\n        assert_equal_after_conversion(ScheduledDelayChange::new(Option::none(), Option::some(post), block_of_change));\n        assert_equal_after_conversion(ScheduledDelayChange::new(Option::none(), Option::none(), block_of_change));\n    }\n\n    fn get_non_initial_delay_change(\n        pre: u32,\n        post: u32,\n        block_of_change: u32\n    ) -> ScheduledDelayChange<TEST_INITIAL_DELAY> {\n        ScheduledDelayChange::new(Option::some(pre), Option::some(post), block_of_change)\n    }\n\n    fn get_initial_delay_change() -> ScheduledDelayChange<TEST_INITIAL_DELAY> {\n        ScheduledDelayChange::deserialize([0])\n    }\n\n    #[test]\n    fn test_get_current() {\n        let pre = 1;\n        let post = 2;\n        let block_of_change = 50;\n\n        let delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n\n        assert_eq(delay_change.get_current(0), pre);\n        assert_eq(delay_change.get_current(block_of_change - 1), pre);\n        assert_eq(delay_change.get_current(block_of_change), post);\n        assert_eq(delay_change.get_current(block_of_change + 1), post);\n    }\n\n    #[test]\n    fn test_get_current_initial() {\n        let delay_change = get_initial_delay_change();\n\n        assert_eq(delay_change.get_current(0), TEST_INITIAL_DELAY);\n        assert_eq(delay_change.get_current(1), TEST_INITIAL_DELAY);\n    }\n\n    #[test]\n    fn test_get_scheduled() {\n        let pre = 1;\n        let post = 2;\n        let block_of_change = 50;\n\n        let delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n\n        assert_eq(delay_change.get_scheduled(), (post, block_of_change));\n    }\n\n    #[test]\n    fn test_get_scheduled_initial() {\n        let delay_change = get_initial_delay_change();\n\n        assert_eq(delay_change.get_scheduled(), (TEST_INITIAL_DELAY, 0));\n    }\n\n    #[test]\n    fn test_schedule_change_to_shorter_delay_before_change() {\n        let pre = 15;\n        let post = 25;\n        let block_of_change = 500;\n\n        let new = 10;\n        let current_block_number = block_of_change - 50;\n\n        let mut delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n        delay_change.schedule_change(new, current_block_number);\n\n        // Because we re-schedule before the last scheduled change takes effect, the old `post` value is lost. The\n        // schedule time is determined by the difference between the current value (pre) and new delay.\n        assert_eq(delay_change.pre.unwrap(), pre);\n        assert_eq(delay_change.post.unwrap(), new);\n        assert_eq(delay_change.block_of_change, current_block_number + pre - new);\n    }\n\n    #[test]\n    fn test_schedule_change_to_shorter_delay_after_change() {\n        let pre = 15;\n        let post = 25;\n        let block_of_change = 500;\n\n        let new = 10;\n        let current_block_number = block_of_change + 50;\n\n        let mut delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n        delay_change.schedule_change(new, current_block_number);\n\n        // The schedule time is determined by the different between the current value (ex post, now pre) and new delay.\n        assert_eq(delay_change.pre.unwrap(), post);\n        assert_eq(delay_change.post.unwrap(), new);\n        assert_eq(delay_change.block_of_change, current_block_number + post - new);\n    }\n\n    #[test]\n    fn test_schedule_change_to_shorter_delay_from_initial() {\n        let new = TEST_INITIAL_DELAY - 1;\n        let current_block_number = 50;\n\n        let mut delay_change = get_initial_delay_change();\n        delay_change.schedule_change(new, current_block_number);\n\n        // Like in the after change scenario, the schedule time is determined by the difference between the current value\n        // (initial) and new delay.\n        assert_eq(delay_change.pre.unwrap(), TEST_INITIAL_DELAY);\n        assert_eq(delay_change.post.unwrap(), new);\n        assert_eq(delay_change.block_of_change, current_block_number + TEST_INITIAL_DELAY - new);\n    }\n\n    #[test]\n    fn test_schedule_change_to_longer_delay_before_change() {\n        let pre = 15;\n        let post = 25;\n        let block_of_change = 500;\n\n        let new = 40;\n        let current_block_number = block_of_change - 50;\n\n        let mut delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n        delay_change.schedule_change(new, current_block_number);\n\n        // Because we re-schedule before the last scheduled change takes effect, the old `post` value is lost. The\n        // change is effective immediately because the new delay is longer than the current one.\n        assert_eq(delay_change.pre.unwrap(), pre);\n        assert_eq(delay_change.post.unwrap(), new);\n        assert_eq(delay_change.block_of_change, current_block_number);\n        assert_eq(delay_change.get_current(current_block_number), new);\n    }\n\n    #[test]\n    fn test_schedule_change_to_longer_delay_after_change() {\n        let pre = 15;\n        let post = 25;\n        let block_of_change = 500;\n\n        let new = 40;\n        let current_block_number = block_of_change + 50;\n\n        let mut delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n        delay_change.schedule_change(new, current_block_number);\n\n        // Change is effective immediately because the new delay is longer than the current one.\n        assert_eq(delay_change.pre.unwrap(), post);\n        assert_eq(delay_change.post.unwrap(), new);\n        assert_eq(delay_change.block_of_change, current_block_number);\n        assert_eq(delay_change.get_current(current_block_number), new);\n    }\n\n    #[test]\n    fn test_schedule_change_to_longer_delay_from_initial() {\n        let new = TEST_INITIAL_DELAY + 1;\n        let current_block_number = 50;\n\n        let mut delay_change = get_initial_delay_change();\n        delay_change.schedule_change(new, current_block_number);\n\n        // Like in the after change scenario, change is effective immediately because the new delay is longer than the \n        // current one.\n        assert_eq(delay_change.pre.unwrap(), TEST_INITIAL_DELAY);\n        assert_eq(delay_change.post.unwrap(), new);\n        assert_eq(delay_change.block_of_change, current_block_number);\n        assert_eq(delay_change.get_current(current_block_number), new);\n    }\n\n    fn assert_effective_minimum_delay_invariants<INITIAL_DELAY>(\n        delay_change: &mut ScheduledDelayChange<INITIAL_DELAY>,\n        historical_block_number: u32,\n        effective_minimum_delay: u32\n    ) {\n        // The effective minimum delays guarantees the earliest block in which a scheduled value change could be made\n        // effective. No action, even if executed immediately after the historical block, should result in a scheduled\n        // value change having a block of change lower than this.\n        let expected_earliest_value_change_block = historical_block_number + 1 + effective_minimum_delay;\n\n        if delay_change.block_of_change > historical_block_number {\n            // If a delay change is already scheduled to happen in the future, we then must consider the scenario in\n            // which a value change is scheduled to occur right as the delay changes and becomes the current one.\n            let delay_change_block = delay_change.block_of_change;\n\n            let value_change_block = delay_change_block + delay_change.get_current(delay_change_block);\n            assert(expected_earliest_value_change_block <= value_change_block);\n        }\n\n        // Another possibility would be to schedule a value change immediately after the historical block.\n        let change_schedule_block = historical_block_number + 1;\n        let value_change_block = change_schedule_block + delay_change.get_current(change_schedule_block);\n        assert(expected_earliest_value_change_block <= value_change_block);\n\n        // Finally, a delay reduction could be scheduled immediately after the historical block. We reduce the delay to \n        // zero, which means that at the delay block of change there'll be no delay and a value change could be \n        // performed immediately then.\n        delay_change.schedule_change(0, historical_block_number + 1);\n        assert(expected_earliest_value_change_block <= delay_change.block_of_change);\n    }\n\n    #[test]\n    fn test_get_effective_delay_at_before_change_in_far_future() {\n        let pre = 15;\n        let post = 25;\n        let block_of_change = 500;\n\n        let historical_block_number = 200;\n\n        let mut delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n\n        // The scheduled delay change is far into the future (further than the current delay is), so it doesn't affect\n        // the effective delay, which is simply the current one (pre).\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        assert_eq(effective_minimum_delay, pre);\n\n        assert_effective_minimum_delay_invariants(\n            &mut delay_change,\n            historical_block_number,\n            effective_minimum_delay\n        );\n    }\n\n    #[test]\n    fn test_get_effective_delay_at_before_change_to_long_delay() {\n        let pre = 15;\n        let post = 25;\n        let block_of_change = 500;\n\n        let historical_block_number = 495;\n\n        let mut delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n\n        // The scheduled delay change will be effective soon (it's fewer blocks away than the current delay), but due to\n        // it being larger than the current one it doesn't affect the effective delay, which is simply the current one\n        // (pre).\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        assert_eq(effective_minimum_delay, pre);\n\n        assert_effective_minimum_delay_invariants(\n            &mut delay_change,\n            historical_block_number,\n            effective_minimum_delay\n        );\n    }\n\n    #[test]\n    fn test_get_effective_delay_at_before_near_change_to_short_delay() {\n        let pre = 15;\n        let post = 3;\n        let block_of_change = 500;\n\n        let historical_block_number = 495;\n\n        let mut delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n\n        // The scheduled delay change will be effective soon (it's fewer blocks away than the current delay), and it's\n        // changing to a value smaller than the current one. This means that at the block of change the delay will be\n        // reduced, and a delay change would be scheduled there with an overall delay lower than the current one.\n        // The effective delay therefore is the new delay plus the number of blocks that need to elapse until it becomes\n        // effective (i.e. until the block of change).\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        assert_eq(effective_minimum_delay, post + block_of_change - (historical_block_number + 1));\n\n        assert_effective_minimum_delay_invariants(\n            &mut delay_change,\n            historical_block_number,\n            effective_minimum_delay\n        );\n    }\n\n    #[test]\n    fn test_get_effective_delay_at_after_change() {\n        let pre = 15;\n        let post = 25;\n        let block_of_change = 500;\n\n        let historical_block_number = block_of_change + 50;\n\n        let mut delay_change = get_non_initial_delay_change(pre, post, block_of_change);\n\n        // No delay change is scheduled, so the effective delay is simply the current one (post).\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        assert_eq(effective_minimum_delay, post);\n\n        assert_effective_minimum_delay_invariants(\n            &mut delay_change,\n            historical_block_number,\n            effective_minimum_delay\n        );\n    }\n\n    #[test]\n    fn test_get_effective_delay_at_initial() {\n        let mut delay_change = get_initial_delay_change();\n\n        let historical_block_number = 200;\n\n        // Like in the after change scenario, no delay change is scheduled, so the effective delay is simply the current \n        // one (initial).\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        assert_eq(effective_minimum_delay, TEST_INITIAL_DELAY);\n\n        assert_effective_minimum_delay_invariants(\n            &mut delay_change,\n            historical_block_number,\n            effective_minimum_delay\n        );\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr"},"66":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm_context;\nmod interface;\nmod gas;\n\nuse interface::{\n    ContextInterface, PrivateCallInterface, PublicCallInterface, PrivateVoidCallInterface,\n    PublicVoidCallInterface, AvmCallInterface, AvmVoidCallInterface\n};\nuse private_context::PrivateContext;\nuse private_context::PackedReturns;\nuse public_context::PublicContext;\nuse public_context::FunctionReturns;\nuse avm_context::AvmContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    avm: Option<&mut AvmContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), avm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), avm: Option::none() }\n    }\n\n    pub fn avm(context: &mut AvmContext) -> Context {\n        Context { avm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), avm: Option::none() }\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/context.nr"},"68":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, AvmContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n    history::nullifier_inclusion::prove_nullifier_inclusion\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_avm(context: &mut AvmContext) {\n    mark_as_initialized(context);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    mark_as_initialized(context);\n}\n\nfn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_avm(context: &mut AvmContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\npub fn assert_initialization_matches_address_preimage_avm(context: AvmContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    assert_initialization_matches_address_preimage(context);\n}\n\nfn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"70":{"source":"use crate::keys::PublicKeys;\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nfn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 9] {}\n\nunconstrained fn get_public_keys_and_partial_address_oracle_wrapper(address: AztecAddress) -> [Field; 9] {\n    get_public_keys_and_partial_address_oracle(address)\n}\n\nfn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle_wrapper(address);\n\n    let keys = PublicKeys {\n        npk_m: GrumpkinPoint::new(result[0], result[1]),\n        ivpk_m: GrumpkinPoint::new(result[2], result[3]),\n        ovpk_m: GrumpkinPoint::new(result[4], result[5]),\n        tpk_m: GrumpkinPoint::new(result[6], result[7])\n    };\n\n    let partial_address = PartialAddress::from_field(result[8]);\n\n    (keys, partial_address)\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"73":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        inner_note_hash,\n        counter\n    )\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash, counter)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"77":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"81":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nfn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"85":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\n// TODO(1139): Should take encrypted data.\n// Currently returns encrypted data to be hashed\n// = 112 + 32 * (N + 3) bytes = N + 7 fields\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N],\n    _counter: u32\n) -> [Field; M] {}\n\nunconstrained pub fn emit_encrypted_log<N, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ivpk_m: GrumpkinPoint,\n    preimage: [Field; N],\n    counter: u32\n) -> [Field; M] {\n    emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ivpk_m,\n        preimage,\n        counter\n    )\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"86":{"source":"#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr"},"87":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"88":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\n// Nullifier keys pertaining to a specific account\nstruct NullifierKeys {\n    account: AztecAddress,\n    master_nullifier_public_key: GrumpkinPoint,\n    app_nullifier_secret_key: Field,\n}\n\n#[oracle(getNullifierKeys)]\nfn get_nullifier_keys_oracle(_account: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_nullifier_keys_internal(account: AztecAddress) -> NullifierKeys {\n    let result = get_nullifier_keys_oracle(account);\n    NullifierKeys {\n        account,\n        master_nullifier_public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        app_nullifier_secret_key: result[2]\n    }\n}\n\npub fn get_nullifier_keys(account: AztecAddress) -> NullifierKeys {\n    get_nullifier_keys_internal(account)\n}\n\npub fn get_app_nullifier_secret_key(account: AztecAddress) -> Field {\n    get_nullifier_keys_internal(account).app_nullifier_secret_key\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"99":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message,\n    hash::{hash_args_array, ArgsHasher, compute_encrypted_log_hash, compute_unencrypted_log_hash},\n    oracle::{\n    arguments, returns, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n},\n    header::get_header_at, logs::emit_encrypted_log,\n    logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog},\n    nullifier_key::{get_nullifier_keys, NullifierKeys}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, side_effect::SideEffect\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL\n},\n    grumpkin_point::GrumpkinPoint, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{is_empty, Deserialize, Empty}\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<NoteHash, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<Nullifier, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    encrypted_logs_hashes: BoundedVec<SideEffect, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<SideEffect, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    nullifier_key: Option<NullifierKeys>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.new_nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            encrypted_log_preimages_length: 0,\n            unencrypted_log_preimages_length: 0,\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        returns::pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            encrypted_log_preimages_length: self.encrypted_log_preimages_length + 4,\n            unencrypted_log_preimages_length: self.unencrypted_log_preimages_length + 4,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_app_nullifier_secret_key(&mut self, account: AztecAddress) -> Field {\n        let keys = if self.nullifier_key.is_none() {\n            let keys = get_nullifier_keys(account);\n            let request = NullifierKeyValidationRequest {\n                master_nullifier_public_key: keys.master_nullifier_public_key,\n                app_nullifier_secret_key: keys.app_nullifier_secret_key\n            };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(keys);\n            keys\n        } else {\n            let keys = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(keys.account == account, \"Cannot query nullifier key for more than one account per call\");\n            keys\n        };\n        keys.app_nullifier_secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n    // --> might be a better approach to force devs to make a public function call that emits the log if needed then\n    // it would be less easy to accidentally leak information.\n    // If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\n    pub fn emit_unencrypted_log<T, N, M>(&mut self, log: T) where T: ToBytesForUnencryptedLog<N, M> {\n        let event_selector = 5; // TODO: compute actual event selector.\n        let contract_address = self.this_address();\n        let log_slice = log.to_be_bytes_arr();\n        let log_hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n        let side_effect = SideEffect { value: log_hash, counter: self.next_counter() };\n        self.unencrypted_logs_hashes.push(side_effect);\n        // 44 = addr (32) + selector (4) + raw log len (4) + processed log len (4)\n        self.unencrypted_log_preimages_length += 44 + log_slice.len().to_field();\n        // call oracle\n        let _void = emit_unencrypted_log_private_internal(contract_address, event_selector, log, side_effect.counter);\n    }\n\n    // This fn exists separately from emit_unencrypted_log because sha hashing the preimage\n    // is too large to compile (16,200 fields, 518,400 bytes) => the oracle hashes it\n    // It is ONLY used with contract_class_registerer_contract since we already assert correctness:\n    // - Contract class -> we will commit to the packed bytecode (currently a TODO)\n    // - Private function -> we provide a membership proof\n    // - Unconstrained function -> we provide a membership proof\n    // Ordinary logs are not protected by the above so this fn shouldn't be called by anything else\n    pub fn emit_contract_class_unencrypted_log<N>(&mut self, log: [Field; N]) {\n        let event_selector = 5; // TODO: compute actual event selector.\n        let contract_address = self.this_address();\n        let counter = self.next_counter();\n        let log_hash = emit_contract_class_unencrypted_log_private_internal(contract_address, event_selector, log, counter);\n        let side_effect = SideEffect { value: log_hash, counter };\n        self.unencrypted_logs_hashes.push(side_effect);\n        // 44 = addr (32) + selector (4) + raw log len (4) + processed log len (4)\n        self.unencrypted_log_preimages_length += 44 + N*32;\n    }\n\n    pub fn emit_encrypted_log<N, M, L>(\n        &mut self,\n        contract_address: AztecAddress,\n        storage_slot: Field,\n        note_type_id: Field,\n        ivpk_m: GrumpkinPoint,\n        preimage: [Field; N]\n    ) where [Field; N]: LensForEncryptedLog<N, M, L> {\n        // TODO(1139): perform encryption in the circuit\n        // The oracle call should come last, but we require the encrypted value for now\n        let counter = self.next_counter();\n        let encrypted_log: [Field; M] = emit_encrypted_log(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            ivpk_m,\n            preimage,\n            counter\n        );\n        let log_hash = compute_encrypted_log_hash(encrypted_log);\n        let side_effect = SideEffect { value: log_hash, counter };\n        self.encrypted_logs_hashes.push(side_effect);\n        let encrypted_log_byte_len = 112 + 32 * (N + 3);\n        // + processed log len (4)\n        self.encrypted_log_preimages_length += encrypted_log_byte_len + 4;\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            private_call_stack_hashes : BoundedVec::new(),\n            public_call_stack_hashes : BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            new_l2_to_l1_msgs : BoundedVec::new(),\n            historical_header: Header::empty(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            encrypted_log_preimages_length: 0,\n            unencrypted_log_preimages_length: 0,\n            nullifier_key: Option::none(),\n        }\n    }\n}\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = returns::unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle_private<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, event_selector, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nfn emit_contract_class_unencrypted_log_private<N>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<N>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, event_selector, message, counter)\n}\n\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"103":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, poseidon2_hash, silo_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_encrypted_log_hash<N, M, L>(encrypted_log: [Field; M]) -> Field where [Field; N]: LensForEncryptedLog<N, M, L> {\n    let mut bytes = [0; L];\n    // Note that bytes.append(encrypted_log[i].to_be_bytes(31)) results in bound error\n    for i in 0..M - 1 {\n        let to_add = encrypted_log[i].to_be_bytes(31);\n        for j in 0..31 {\n            bytes[i*31 + j] = to_add[j];\n        }\n    }\n    // can't assign as L - not in scope error for: L-31*(M-1)\n    let num_bytes = bytes.len() as u32 - 31 * (M - 1);\n    let to_add_final = encrypted_log[M - 1].to_be_bytes(num_bytes);\n    for j in 0..num_bytes {\n        bytes[(M-1)*31 + j] = to_add_final[j];\n    }\n    sha256_to_field(bytes)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let event_bytes = event_selector.to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = event_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[36 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[40 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub fn compute_siloed_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    silo_nullifier(address, nullifier)\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() < ARGS_HASH_CHUNK_COUNT * ARGS_HASH_CHUNK_LENGTH);\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..800 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x05a1023fef839ac88731f49ae983e172c1b600a3c8f3393ad0ac25d819ac0f0f);\n}\n\n#[test]\nfn compute_enc_log_hash_304() {\n    let input = [\n        0x0000000000000000000000000000000000000000000000000000000000000000,\n        0x0021a0d4aa9989656b592187cf6da1965df53ab2ff2277421e663465cf20d3e9,\n        0x00c3969cc350f3474f8187a33ac1317181961f5f94043b07ce888d85a5d20cb5,\n        0x0058198041ed1547b056955b5141a5a8a1551b0c8d094255ec9daaf3604d9348,\n        0x00247ad96df2e4d984cf795ed7316234743a681f824a45c46253de8bfde48850,\n        0x007fc251f4ce44f4e9aba3dbf6567228be28fac85660156f2825ddb0b0577457,\n        0x009315851323c6bc2aaa42e23fe5f3be97208f2d8167eafdfc5742d94f2f4dd4,\n        0x00b938289e563b0fe01982cd9b8d9e33e3069046768ad01c0fb05e429e7b7909,\n        0x00fbcc257a3211f705b471eee763b0f43876a2b2178fab6d2b09bd2b7e086584,\n        0x000000000000008c3289b5793b7448f4d45ecde039d004b6f037cad10b5c2336\n    ];\n    let hash = compute_encrypted_log_hash(input);\n    assert(hash == 0x001e3c013994947fe28957a876bf1b2c3a69ac69cc92909efd4f2ae9b972f893);\n}\n\n#[test]\nfn compute_enc_log_hash_368() {\n    let input = [\n        0x0000000000000000000000000000000000000000000000000000000000000000,\n        0x002190697d2a50e229a7a077e0951073f7d51e46679f10466153c308b63b1ea9,\n        0x00543e346facc6799b94514c9d461bcc836c04b083b13c2e4544a39130473c1e,\n        0x000df76d59526f8f953bcc7d9f77cdaefd36435931f0d7348f794bc275b42ded,\n        0x00a6d390ee1723af7f7ac1ae4fc81a266b2370fe07040a36d06dbe242e02413e,\n        0x00acbce15b6af1fbe94bd0f7b70f11768265dff77bfe63398f2a053efdfdf26d,\n        0x00b8b131b9f42c689beb095ba4f4a836d4d15c9068d0422e9add6ca82b786329,\n        0x00661a6a654b38f0f97d404ef5553e0efea9ed670561ae86685b31bbb2824fac,\n        0x00113a6b58edfaec0065b365f66ba8d8aa68254b8690035e8d671a17a843f0a1,\n        0x0023f2d2eae8c4449bac8f268a3e62a3faace1fe1401f0efdc8b0ccfbc8fb271,\n        0x00cf6603f8c61993dd2f662c719671c61727a2f4e925fb988b23d31feccd77d9,\n        0x0000000000a402a84b7294671799c38dd805f6a827a3a12633fdf91a57debe1f\n    ];\n    let hash = compute_encrypted_log_hash(input);\n    assert(hash == 0x00a0d651ac0cbc01b72430fa6a05d91738595af6e0229347b4c9968223387aeb);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let event_selector = 5;\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x00846d6969c8c2f61d39cd2762efcb0abb14f88d59c2675910251ef2bcffe9a7);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let event_selector = 5;\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x00880a801230ea08c98a802a11b4786cba474513875f0fc69a615e81c5f9f21c);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let event_selector = 5;\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x00a78b5347813624ecfd26e5b8bc6146f418b0cfcc8296b5112d09b8ebba9496);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let event_selector = 5;\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, event_selector, log);\n    assert(hash == 0x001f3390ea242afee7ce46dafdbdc4bd4f1cf20cd63850d12d60ff9956712c4f);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"105":{"source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH, hash::poseidon2_hash,\n    grumpkin_point::GrumpkinPoint, traits::{Deserialize, Serialize}\n};\n\n// Note: In fetch_key_from_registry we expect that the shared mutable slot is index * 2 + 1 for the x coordinate and\n// index * 2 + 2 for the y coordinate. For example, the npk_m x coordinates will be stored in a map at storage slot\n// 0 * 2 + 1 = 1, and the npk_m y coordinates at 2 * 2 + 2 = 6. If this changes the function will need to be\n// refactored.\nglobal NULLIFIER_INDEX = 0;\nglobal INCOMING_INDEX = 1;\nglobal OUTGOING_INDEX = 2;\nglobal TAGGING_INDEX = 3;\n\nglobal PUBLIC_KEYS_LENGTH = 8;\n\nstruct PublicKeys {\n    npk_m: GrumpkinPoint,\n    ivpk_m: GrumpkinPoint,\n    ovpk_m: GrumpkinPoint,\n    tpk_m: GrumpkinPoint,\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            poseidon2_hash(\n                [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.tpk_m.x,\n            self.tpk_m.y,\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH\n        ]\n            )\n        )\n    }\n\n    pub fn get_key_by_index(self, index: Field) -> GrumpkinPoint {\n        assert(index as u8 < 4, \"Invalid key index\");\n        if index == NULLIFIER_INDEX {\n            self.npk_m\n        } else if index == INCOMING_INDEX {\n            self.ivpk_m\n        } else if index == OUTGOING_INDEX {\n            self.ovpk_m\n        } else {\n            self.tpk_m\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.tpk_m.x,\n            self.tpk_m.y,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: GrumpkinPoint { x: serialized[0], y: serialized[1] },\n            ivpk_m: GrumpkinPoint { x: serialized[2], y: serialized[3] },\n            ovpk_m: GrumpkinPoint { x: serialized[4], y: serialized[5] },\n            tpk_m: GrumpkinPoint { x: serialized[6], y: serialized[7] },\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: GrumpkinPoint { x: 1, y: 2 },\n        ivpk_m: GrumpkinPoint { x: 3, y: 4 },\n        ovpk_m: GrumpkinPoint { x: 5, y: 6 },\n        tpk_m: GrumpkinPoint { x: 7, y: 8 }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x1936abe4f6a920d16a9f6917f10a679507687e2cd935dd1f1cdcb1e908c027f3;\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: GrumpkinPoint { x: 1, y: 2 },\n        ivpk_m: GrumpkinPoint { x: 3, y: 4 },\n        ovpk_m: GrumpkinPoint { x: 5, y: 6 },\n        tpk_m: GrumpkinPoint { x: 7, y: 8 }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.x, deserialized.npk_m.x);\n    assert_eq(keys.npk_m.y, deserialized.npk_m.y);\n    assert_eq(keys.ivpk_m.x, deserialized.ivpk_m.x);\n    assert_eq(keys.ivpk_m.y, deserialized.ivpk_m.y);\n    assert_eq(keys.ovpk_m.x, deserialized.ovpk_m.x);\n    assert_eq(keys.ovpk_m.y, deserialized.ovpk_m.y);\n    assert_eq(keys.tpk_m.x, deserialized.tpk_m.x);\n    assert_eq(keys.tpk_m.y, deserialized.tpk_m.y);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr"},"106":{"source":"use dep::protocol_types::{address::AztecAddress, constants::CANONICAL_KEY_REGISTRY_ADDRESS, grumpkin_point::GrumpkinPoint};\nuse crate::{\n    context::PrivateContext, oracle::keys::get_public_keys_and_partial_address,\n    keys::public_keys::{PublicKeys, NULLIFIER_INDEX, INCOMING_INDEX},\n    state_vars::{\n    map::derive_storage_slot_in_map,\n    shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter\n}\n};\n\nglobal DELAY = 5;\n\npub fn get_npk_m(context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint {\n    get_master_key(context, address, NULLIFIER_INDEX)\n}\n\npub fn get_ivpk_m(context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint {\n    get_master_key(context, address, INCOMING_INDEX)\n}\n\n// Commented out as it's currently not enabled in key registry\n// pub fn get_ovpk_m(context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint {\n//     get_master_key(context, address, OUTGOING_INDEX)\n// }\n// \n// pub fn get_tpk_m(context: &mut PrivateContext, address: AztecAddress) -> GrumpkinPoint {\n//     get_master_key(context, address, TAGGING_INDEX)\n// }\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field\n) -> GrumpkinPoint {\n    let key = fetch_key_from_registry(context, key_index, address);\n    if key.is_zero() {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress\n) -> GrumpkinPoint {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        *context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        *context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_current_value_in_private();\n    let y_coordinate = y_coordinate_registry.get_current_value_in_private();\n\n    GrumpkinPoint::new(x_coordinate, y_coordinate)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/keys/getters.nr"},"110":{"source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\n\nfn extract_property_value_from_selector<N>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    _get_notes_constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\npub fn _get_notes_constrain_get_notes_internal<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let mut returned_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            // The below code is used to collapse a sparse array into one where the values are guaranteed to be at the front of the array\n            // We write at returned_notes[num_notes] because num_notes is only advanced when we have a value in opt_notes\n            returned_notes[num_notes] = Option::some(note);\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n\n    assert(num_notes != 0, \"Cannot return zero notes\");\n\n    returned_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"113":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__INNER_NOTE_HASH\n},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, unique_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), unique_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    pedersen_hash(\n        [header.storage_slot, note_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_unique_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, inner_note_hash)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let unique_note_hash = if (header.nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n        // Remove this once notes added from public also include nonces.\n        compute_inner_note_hash(note_with_header)\n    } else {\n        compute_unique_note_hash(note_with_header)\n    };\n\n    compute_siloed_hash(header.contract_address, unique_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_read_request<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n\n    if (header.nonce != 0) {\n        compute_unique_note_hash(note)\n    } else {\n        compute_inner_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Should always be calling compute_unique_hash() once notes added from public also include nonces.\n    let unique_note_hash = if note_header.nonce != 0 {\n        compute_unique_hash(note_header.nonce, inner_note_hash)\n    } else {\n        inner_note_hash\n    };\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"114":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    let note_hash_counter = context.side_effect_counter;\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.set_header(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, consumed_note_hash, nullifier_counter) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"116":{"source":"use dep::std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, Comparator, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        value: T,\n        comparator: Option<u8>\n    ) -> Self where T: ToField {\n        self.selects.push(\n            Option::some(\n                Select::new(\n                    property_selector,\n                    value.to_field(),\n                    comparator.unwrap_or(Comparator.EQ)\n                )\n            )\n        );\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr"},"120":{"source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion(nullifier: Field, context: PrivateContext) {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"122":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\nfn _public_storage_historical_read(storage_slot: Field, contract_address: AztecAddress, header: Header) -> Field {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 2) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 3) Extract the value from the witness leaf and check that the storage slot is correct\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    let value = if is_in_range {\n        0\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n        preimage.value\n    };\n\n    // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n    // but also the metadata (slot, next index and next slot).\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n\n    value\n}\n\npub fn public_storage_historical_read(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress // The contract we want to look into\n) -> Field {\n    _public_storage_historical_read(storage_slot, contract_address, context.historical_header)\n}\n\npub fn public_storage_historical_read_at(\n    context: PrivateContext,\n    storage_slot: Field, // The storage slot to read\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32 // The block number at the end of which we'll read the value\n) -> Field {\n    let header = context.get_header_at(block_number);\n\n    _public_storage_historical_read(storage_slot, contract_address, header)\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"147":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"149":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"161":{"source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr"},"168":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"169":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"170":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::{ToField, FromField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"171":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::recursion::verification_key::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::SideEffect;\nuse crate::traits::is_empty;\nuse crate::utils::{uint256::U256, field::field_from_bytes_32_trunc};\nuse crate::constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX\n};\nuse crate::traits::Hash;\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, note_hash_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        note_hash_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(address: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [SideEffect; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    dep::std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5, counter: 1234 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"174":{"source":"use dep::std::cmp::Eq;\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"179":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"219":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::silo_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = silo_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"229":{"source":"use crate::traits::{Serialize, Deserialize};\nuse dep::std::cmp::Eq;\n\nglobal GRUMPKIN_POINT_SERIALIZED_LEN: Field = 2;\n\n// TODO(https://github.com/noir-lang/noir/issues/4931)\nstruct GrumpkinPoint {\n    x: Field,\n    y: Field,\n}\n\nimpl Serialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn serialize(self) -> [Field; GRUMPKIN_POINT_SERIALIZED_LEN] {\n        [self.x, self.y]\n    }\n}\n\nimpl Deserialize<GRUMPKIN_POINT_SERIALIZED_LEN> for GrumpkinPoint {\n    fn deserialize(serialized: [Field; GRUMPKIN_POINT_SERIALIZED_LEN]) -> Self {\n        Self {\n            x: serialized[0],\n            y: serialized[1],\n        }\n    }\n}\n\nimpl Eq for GrumpkinPoint {\n    fn eq(self, point: GrumpkinPoint) -> bool {\n        (point.x == self.x) & (point.y == self.y)\n    }\n}\n\nimpl GrumpkinPoint {\n    pub fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    pub fn zero() -> Self {\n        Self { x: 0, y: 0 }\n    }\n\n    pub fn is_zero(self) -> bool {\n        (self.x == 0) & (self.y == 0)\n    }\n\n    // TODO(David): Would be quite careful here as (0,0) is not a point\n    // on the curve. A boolean flag may be the better approach here,\n    // would also cost less constraints. It seems like we don't need to \n    // group arithmetic either. \n    fn assert_is_zero(self) {\n        assert(self.x == 0);\n        assert(self.y == 0);\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 64] {\n        let mut result = [0 as u8; 64];\n        let x_bytes = self.x.to_be_bytes(32);\n        let y_bytes = self.y.to_be_bytes(32);\n        for i in 0..32 {\n            result[i] = x_bytes[i];\n            result[i + 32] = y_bytes[i];\n        }\n        result\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/noir-protocol-circuits/crates/types/src/grumpkin_point.nr"},"235":{"source":"use dep::aztec::{\n    keys::getters::get_ivpk_m,\n    protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::{unsafe_rand::unsafe_rand, nullifier_key::get_app_nullifier_secret_key},\n    hash::poseidon2_hash, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_app_nullifier_secret_key(self.owner);\n        poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ])\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_app_nullifier_secret_key(self.owner);\n        poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ])\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let ivpk_m = get_ivpk_m(context, self.owner);\n        context.emit_encrypted_log(\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            ivpk_m,\n            self.serialize_content(),\n        );\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.owner.to_field(), self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n","path":"/root/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.40.1/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}